import GIF from 'gif.js';
// import GIFWorker from 'gif.js/dist/gif.worker';
// TODO @7frank load worker in a more convenient way .. currently the worker script is base64 encoded in the following url
const workerURL = 'data:application/javascript;base64,';

export interface GIFResult {
    url: string;
    blob: Blob;
}


export
    type GIFProgressCallback = (current: number, type?: string) => void;

export interface GIFConverterOptions {
    quality?: number;
    framesPerSecond?: number;
    totalFrames?: number;
}


/*
interface IConverter {
}

interface IBaseConverter {
    converter: IConverter;
    grabFrames(scene: BABYLON.Scene, canvasElement: HTMLCanvasElement, mesh: BABYLON.Mesh): Promise<any>;
    createConverter();
    cancel();

}
*/

/**
 * The class that handles the conversion part rendering the scene into a separate context and grabbing frames creating a gif in the end.
 */
export class THREE2GIFConverter {
    gif: GIF;
    options: GIFConverterOptions;
    debug: true;
    private sigCancel: boolean;

    constructor(private width: number = 512, private height: number = 512, options?: GIFConverterOptions) {

        const defaults: GIFConverterOptions = {quality: 8, framesPerSecond: 30, totalFrames: 60};
        this.options = Object.assign(defaults, options);


      this.createConverter();

    }

    createConverter() {
        this.gif = new GIF({
            repeat: 0,
            workers: 2,
            quality: this.options.quality,
            //workerScript:"libs/gif.js/gif.worker.js"
            workerScript: workerURL
        });
    }

    cancel() {
        this.sigCancel = true;
    }


    /**
     *
     * Renders a specific amount of frames based on {@link THREE2GIFConverter.options}.
     * @param {BABYLON.Scene} scene
     * @param {HTMLCanvasElement} canvasElement
     * @param {BABYLON.Mesh} mesh
     * @returns {Promise<any>}
     */
    async grabFrames(scene: BABYLON.Scene, canvasElement: HTMLCanvasElement, mesh: BABYLON.Mesh): Promise<any> {


        const amount = this.options.totalFrames, fps = this.options.framesPerSecond;
        return new Promise((resolve, reject) => {


            let imgNm = 0;

            let setSize, stopCapture, captureNextFrame;

            setSize = () => {
                scene.getEngine().setSize(this.width, this.height);
            };

            stopCapture = () => {

                scene.unregisterBeforeRender(setSize);
                scene.unregisterAfterRender(captureNextFrame);

            };

            captureNextFrame = () => {

                // make sure to reject if cancel flag is set
                if (this.sigCancel) {
                    stopCapture();
                    reject(new Error('canceled manually'));
                }

                if (imgNm++ < amount + 1) {
                    if (imgNm !== 1) {
                        this.gif.addFrame(canvasElement, {copy: true, delay: 1000 / fps});
                    }
                    // Add a constant rotation per frame.

                    const axis = new BABYLON.Vector3(-1, 1, 0);
                    const angle = Math.PI / 4;
                    const quaternionBase: BABYLON.Quaternion = BABYLON.Quaternion.RotationAxis(axis, angle);


                    const axis2 = new BABYLON.Vector3(0, 1, 0);
                    const angle2 = imgNm * 2 * Math.PI / amount;

                    const quaternionRotation = BABYLON.Quaternion.RotationAxis(axis2, angle2);

                    mesh.rotationQuaternion = quaternionRotation.multiply(quaternionBase);


                } else {
                    stopCapture();
                    resolve();
                }
            };


            scene.registerBeforeRender(setSize);
            scene.registerAfterRender(captureNextFrame);


        });


    }


    async startRecording(canvasElement: HTMLCanvasElement, scene, mesh: BABYLON.Mesh, progessCB?: GIFProgressCallback): Promise<GIFResult> {
        const gif = this.gif;

        await this.grabFrames(scene, canvasElement, mesh);

        gif.on('progress', progessCB);

        return new Promise<GIFResult>((resolve, reject) => {

            gif.on('progress', () => {

                if (this.sigCancel) {
                    gif.abort();
                    reject(new Error('canceled manually'));
                }

            });

            gif.on('finished', function (blob) {
                const url = URL.createObjectURL(blob);
                resolve({url, blob});
            });
            gif.render();
        });


    }
}



